openapi: 3.0.3
info:
  title: Swagger для Дипломной Работы
  description: |-
    Это Swagger для Дипломной работы Пичугина Алексей, группа ИУ9-81Б.
  termsOfService: http://swagger.io/terms/
  contact:
    email: apiteam@swagger.io
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.11
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
  - url: http://194.87.99.230:5002
    description: backend server
  - url: http://194.87.99.230:5001
    description: shop server
tags:
  - name: backendBasket
    description: Все методы для взаимодействия с корзиной на стороне Backend Server
  - name: backendInvoice
    description: Все методы для взаимодействия со счетом на стороне BackendServer
  - name: shopBasket
    description: Все методы для взаимодействия с корзиной на стороне Магазина
    
paths:
  /baskets:
    post:
      tags:
        - backendBasket
      summary: Добавить новую корзину
      servers:
        - url: http://194.87.99.230:5002
      description: Данный метод используется магазином для добавления новой корзины
      operationId: createBasket
      requestBody:
        description: Добавление новой корзины
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BasketInRequest'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  paymentLink:
                    type: string
                    format: string
                    example: "194.87.99.230:5002/baskets/1"
                    
  /baskets/{basketId}:
    get:
      tags:
        - backendBasket
      summary: Получить содержимое корзины по basketId
      servers:
        - url: http://194.87.99.230:5002
      description: Данный метод используется покупателем для получения содержимого корзины
      operationId: getBasket
      parameters:
        - name: basketId
          in: path
          description: Идентификатор корзины
          required: true
          schema:
            type: integer
            format: int64
        - name: consumerId
          in: query
          description: Идентификатор Покупателя
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BasketInResponseForConsumer'
    patch:
      tags:
        - backendBasket
      summary: Обновить итоговую сумму корзины
      servers:
        - url: http://194.87.99.230:5002
      description: Данный метод используется магазином (Shop) для обновления итоговой стоимости корзины с учетом применных им персонализированных скидок и предложений
      operationId: updateBasketInShop
      parameters:
        - name: basketId
          in: path
          description: Идентификатор корзины
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Обновление итоговой суммы
        content:
          application/json:
            schema:
              type: object
              properties:
                totalAmountWithDiscounts:
                  type: number
                  format: float
                  example: 1000
        required: true
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: string
                format: string
                example: "Success"
  
  /invoices:
    post:
      tags:
        - backendInvoice
      summary: Добавить новую корзину
      servers:
        - url: http://194.87.99.230:5002
      description: Данный метод используется магазином для добавления новой корзины
      operationId: createInvoice
      requestBody:
        description: Добавление новой корзины
        content:
          application/json:
            schema:
              type: object
              properties:
                amount:
                  type: number
                  format: float
                  example: 115
                paymentMethods:
                  type: string
                  format: string
                  example: "SBP, MIR"
                expiredDateTime:
                  type: string
                  format: date-time
                  example: "2023-4-23T20:00:20Z"
                basketId:
                  type: integer
                  format: int64
                  example: 1
                consumerId:
                  type: integer
                  format: int64
                  example: 1
                shopId:
                  type: integer
                  format: int64
                  example: 1
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: string
                format: string
                example: "Success"
                
  
  /baskets/{basketIdInShop}:
    patch:
      tags:
        - shopBasket
      summary: Обновить корзину (это callbackURL)
      servers:
        - url: http://194.87.99.230:5002
      description: Данный метод используется back end server-ом для отправки обновленной корзины в магазин
      operationId: updateBasketInShop
      parameters:
        - name: basketIdInShop
          in: path
          description: Идентификатор корзины
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Обновление информации о существующей корзине, в частности отправка id пользователя
        content:
          application/json:
            schema:
              type: object
              properties:
                consumerId:
                  type: integer
                  format: int64
                  example: 1
                loyaltyId:
                  type: integer
                  format: int64
                  example: 223
                totalAmountWithDiscounts:
                  type: number
                  format: float
                  example: 1000
        required: true
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: string
                format: string
                example: "Success"

components:
  schemas:
    BasketInRequest:
      type: object
      properties:
        idInShop:
          type: integer
          format: int64
          example: 1
        shopId:
          type: integer
          format: int64
          example: 12
        callbackURL:
          type: string
          format: string
          example: 'http://194.87.99.230:5001/baskets/1'
        items:
          type: array
          items: 
            $ref: '#/components/schemas/itemInBasketRequest'
        totalAmount:
          type: number
          format: float
          example: 1200
        totalAmountWithDiscounts:
          type: number
          format: float
          example: 1200
    itemInBasketRequest:
      type: object
      properties:
        quantity:
          type: integer
          format: int64
          example: 12
        amount:
          type: number
          format: float
          example: 1200
        itemId:
          type: integer
          format: int64
          example: 1
    BasketInResponseForConsumer:
      type: object
      properties:
        id:
            type: integer
            format: int64
            example: 1
        idInShop:
          type: integer
          format: int64
          example: 112
        shopId:
          type: integer
          format: int64
          example: 12
        items:
          type: array
          items: 
            $ref: '#/components/schemas/itemInBasketResponseForConsumer'
        totalAmount:
          type: number
          format: float
          example: 1200
        totalAmountWithDiscounts:
          type: number
          format: float
          example: 1200
    itemInBasketResponseForConsumer:
      type: object
      properties:
        itemId:
            type: integer
            format: int64
            example: 1
        name:
          type: string
          format: string
          example: "Coca Cola 0.5"
        oneItemCost:
          type: number
          format: float
          example: 100
        quantity:
          type: integer
          format: int64
          example: 12
        amount:
          type: number
          format: float
          example: 1200